---
import path from "node:path";

interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
	widths?: number[];
	priority?: boolean;
}

import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

const {
	id,
	src,
	alt,
	position = "center",
	basePath = "/",
	widths,
	priority,
} = Astro.props;
const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isRemote =
	src.startsWith("http") || src.startsWith("https") || src.startsWith("data:");
const isPublic = src.startsWith("/");

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <check later>
let img;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../../**", {
		import: "default",
	});
	let normalizedPath = path
		.normalize(path.join("../../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
		);
	}
	img = await file();
}

const imageClass = "w-full h-full object-cover";
const imageStyle = `object-position: ${position}`;
---
<div id={id} class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    {isLocal && img && <Image src={img} alt={alt || ""} quality="max" widths={widths} priority={priority} class={imageClass} style={imageStyle}/>}
    {isRemote && <Image src={src} alt={alt || ""} quality="max" inferSize={true} priority={priority} class={imageClass} style={imageStyle}/>}
    {isPublic && <img src={url(src)} alt={alt || ""} class={imageClass} style={imageStyle}/>}
</div>
