---
import { Image } from "astro:assets";
import path from "node:path";
import { markdownImageConfig } from "@/config";
import { url } from "../../utils/url-utils";

interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
	priority?: boolean;
	widths?: number[];
	sizes?: string;
	quality?: string | number;
}

const {
	id,
	src,
	alt = "",
	position = "center",
	basePath = "",
	priority,
	widths = markdownImageConfig.widths,
	sizes = markdownImageConfig.sizes,
	quality = markdownImageConfig.quality,
} = Astro.props;
const className = Astro.props.class;

const isPublic = src.startsWith("/");
const isRemote =
	src.startsWith("http") || src.startsWith("https") || src.startsWith("data:");
const isLocal = !(isPublic || isRemote);

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <check later>
let img;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>(
		["../../assets/**", "../../content/**"],
		{
			import: "default",
		},
	);
	let normalizedPath = path
		.normalize(path.join("../../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
		);
	}
	img = await file();
}

const imageClass = "w-full h-full object-cover image-content";
const imageStyle = `object-position: ${position}`;
---

<div
    id={id}
    class:list={[className, "overflow-hidden relative"]}
    data-image-wrapper
>
    <div class="loading-bar indeterminate">
        <div class="primary-bar">
            <div class="bar-inner"></div>
        </div>
        <div class="secondary-bar">
            <div class="bar-inner"></div>
        </div>
    </div>
    {
        isPublic && (
            <img
                src={url(src)}
                alt={alt}
                sizes={sizes}
                class={imageClass}
                style={imageStyle}
                data-image-element
            />
        )
    }
    {
        isRemote && (
            <Image
                src={src}
                alt={alt}
                priority={priority}
                widths={widths}
                sizes={sizes}
                quality={quality}
                inferSize={true}
                class={imageClass}
                style={imageStyle}
                data-image-element
            />
        )
    }
    {
        isLocal && img && (
            <Image
                src={img}
                alt={alt}
                priority={priority}
                widths={widths}
                sizes={sizes}
                quality={quality}
                class={imageClass}
                style={imageStyle}
                data-image-element
            />
        )
    }
</div>

<style>
    .loading-bar {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: min(8rem, 75%);
        height: 0.25rem;
        background-color: oklch(0.9 0.05 var(--hue) / 0.5);
        z-index: 10;
        border-radius: 9999px;
        overflow: hidden;
        transition: opacity 0.5s ease-out;
    }

    :global(.dark) .loading-bar {
        background-color: oklch(0.4 0.08 var(--hue) / 0.25);
    }

    .loading-bar.indeterminate {
        direction: ltr;
    }

    .primary-bar,
    .secondary-bar {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
        animation-duration: 2s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
    }

    .bar-inner {
        position: absolute;
        inset: 0;
        background-color: var(--primary);
        animation-duration: 2s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
    }

    .indeterminate .primary-bar {
        left: -145.167%;
        animation-name: primary-indeterminate-translate;
    }

    .indeterminate .primary-bar > .bar-inner {
        animation-name: primary-indeterminate-scale;
    }

    .indeterminate .secondary-bar {
        left: -54.8889%;
        animation-name: secondary-indeterminate-translate;
    }

    .indeterminate .secondary-bar > .bar-inner {
        animation-name: secondary-indeterminate-scale;
    }

    @keyframes primary-indeterminate-translate {
        0% {
            transform: translateX(0px);
        }
        20% {
            animation-timing-function: cubic-bezier(0.5, 0, 0.701732, 0.495819);
            transform: translateX(0px);
        }
        59.15% {
            animation-timing-function: cubic-bezier(
                0.302435,
                0.381352,
                0.55,
                0.956352
            );
            transform: translateX(83.6714%);
        }
        100% {
            transform: translateX(200.611%);
        }
    }

    @keyframes primary-indeterminate-scale {
        0% {
            transform: scaleX(0.08);
        }
        36.65% {
            animation-timing-function: cubic-bezier(
                0.334731,
                0.12482,
                0.785844,
                1
            );
            transform: scaleX(0.08);
        }
        69.15% {
            animation-timing-function: cubic-bezier(0.06, 0.11, 0.6, 1);
            transform: scaleX(0.661479);
        }
        100% {
            transform: scaleX(0.08);
        }
    }

    @keyframes secondary-indeterminate-translate {
        0% {
            animation-timing-function: cubic-bezier(
                0.15,
                0,
                0.515058,
                0.409685
            );
            transform: translateX(0px);
        }
        25% {
            animation-timing-function: cubic-bezier(
                0.31033,
                0.284058,
                0.8,
                0.733712
            );
            transform: translateX(37.6519%);
        }
        48.35% {
            animation-timing-function: cubic-bezier(
                0.4,
                0.627035,
                0.6,
                0.902026
            );
            transform: translateX(84.3862%);
        }
        100% {
            transform: translateX(160.278%);
        }
    }

    @keyframes secondary-indeterminate-scale {
        0% {
            animation-timing-function: cubic-bezier(
                0.205028,
                0.057051,
                0.57661,
                0.453971
            );
            transform: scaleX(0.08);
        }
        19.15% {
            animation-timing-function: cubic-bezier(
                0.152313,
                0.196432,
                0.648374,
                1.00432
            );
            transform: scaleX(0.457104);
        }
        44.15% {
            animation-timing-function: cubic-bezier(
                0.257759,
                -0.003163,
                0.211762,
                1.38179
            );
            transform: scaleX(0.72796);
        }
        100% {
            transform: scaleX(0.08);
        }
    }

    .image-content {
        opacity: 0;
        transition:
            opacity 0.5s ease-out,
            transform 0.3s ease-out;
    }

    .image-content.loaded {
        opacity: 1;
    }

    .loading-bar.hide {
        opacity: 0;
        pointer-events: none;
    }
</style>
